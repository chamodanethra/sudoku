{"version":3,"sources":["components/p096_sudoku.txt","reducers/index.js","components/Grid.js","components/Button.js","actions/index.js","components/App.js","index.js"],"names":["module","exports","combineReducers","isClicked","action","type","payload","stringInput","file","rawFile","XMLHttpRequest","open","data","onreadystatechange","readyState","status","responseText","send","readTextFile","require","Grid","grid","makeArray","puzzle","answer","d1","d2","arr","i","push","Array","this","props","randomPuzzleID","Math","floor","random","lines","split","startIndex","randomStringInput","j","Number","then","wasm","start","Date","now","calculate","console","log","rows","rowID","cell","cellID","cellData","fontColourHex","key","id","className","style","backgroundColor","color","Component","connect","state","Button","buttonText","onClick","clickOnSolveButton","particlesOptions","particles","number","value","density","enable","value_area","App","params","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.fafa1e7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/p096_sudoku.640ae25e.txt\";","import { combineReducers } from 'redux';\n\nconst isClickedReducer = (isClicked = false, action) => {\n    if (action.type === 'SOLVE_BUTTON_CLICKED') {\n        return action.payload;\n    } \n    return isClicked;\n}\n\nexport default combineReducers({\n    isClicked: isClickedReducer,\n});","import React, {Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Grid.css';\r\n\r\nconst readTextFile = (file) => {\r\n  var rawFile = new XMLHttpRequest();\r\n  rawFile.open(\"GET\", file, false);\r\n  let data = null;\r\n  rawFile.onreadystatechange = () => {\r\n      if (rawFile.readyState === 4) {\r\n          if (rawFile.status === 200 || rawFile.status === 0) {\r\n              data = rawFile.responseText;\r\n          }\r\n      }\r\n  };\r\n  rawFile.send(null);\r\n  return data;\r\n};\r\n\r\nconst file = require(\"./p096_sudoku.txt\");\r\nconst stringInput = readTextFile(file);\r\n\r\nclass Grid extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.grid = this.makeArray(9, 9);\r\n    this.puzzle = this.makeArray(9, 9);\r\n    this.answer = this.makeArray(9, 9);\r\n  }\r\n  \r\n\r\n  makeArray(d1, d2) {\r\n    var arr = [];\r\n    for(let i = 0; i < d2; i++) {\r\n        arr.push(new Array(d1));\r\n    }\r\n    return arr;\r\n  }\r\n  \r\n  render(){\r\n    if (!this.props.isClicked) {\r\n      let randomPuzzleID = Math.floor(Math.random() * 50);\r\n      if (randomPuzzleID === 50) {\r\n        randomPuzzleID = 49;\r\n      }\r\n\r\n      let lines = stringInput.split(\"\\n\");\r\n      let startIndex = randomPuzzleID * 10 + 1;\r\n      let randomStringInput = \"\";\r\n      for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n          this.puzzle[i][j] = Number(lines[startIndex + i][j]);\r\n          randomStringInput = randomStringInput + this.puzzle[i][j];      \r\n        }\r\n        randomStringInput += \"\\n\";\r\n      }\r\n\r\n      const wasm = import(\"@chamodanethra/sudoku_solver-wasm\");\r\n      wasm.then(wasm => {\r\n        let start = Date.now();\r\n        let stringOutput = wasm.calculate(randomStringInput);\r\n        let lines = stringOutput.split(\"\\n\");\r\n        for (let i = 0; i < 9; i++) {\r\n          for (let j = 0; j < 9; j++) {\r\n            this.answer[i][j] = Number(lines[i][j]);      \r\n          }\r\n        }\r\n        console.log(\"Time taken to solve : \" + (Date.now() - start) + \"ms\");\r\n      });\r\n    }\r\n\r\n    this.grid = this.props.isClicked ? this.answer : this.puzzle;\r\n    let rows = [];\r\n    for (let i = 0; i < 9; i++){\r\n      let rowID = `row${i}`\r\n      let cell = []\r\n      for (let j = 0; j < 9; j++){\r\n        let cellID = `cell${i}-${j}`\r\n        let cellData = this.grid[i][j] ? `${this.grid[i][j]}` : ``;\r\n        let fontColourHex = this.props.isClicked ? this.puzzle[i][j] ? `#000` : `#f00` : `#000`;\r\n        if ((Math.floor(i / 3) + Math.floor(j / 3)) % 2) {\r\n          cell.push(<td key={cellID} id={cellID} className=\"sub\" style={ {backgroundColor: `#ddd`, color: `${fontColourHex}`} }>\r\n            {cellData}\r\n          </td>)\r\n        } else {\r\n          cell.push(<td key={cellID} id={cellID} className=\"main\" style={ {backgroundColor: `#fff`, color: `${fontColourHex}`} }>\r\n            {cellData}\r\n          </td>)\r\n        }\r\n      }\r\n      rows.push(<tr key={i} id={rowID}>{cell}</tr>)\r\n    }\r\n    return(\r\n      <table id=\"sudoku-grid\" className=\"center\">\r\n          <tbody>\r\n            {rows}\r\n          </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { \r\n    isClicked: state.isClicked,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { clickOnSolveButton } from '../actions/index'\r\n\r\nclass Button extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        let buttonText = this.props.isClicked ? \"Erase\" : \"Solve\";\r\n        return (\r\n            <div className = 'tc f1'>\r\n                <div className = 'tc dib br3 pa2 shadow-5 w-12 grow'>\r\n                    <button onClick={ () => this.props.clickOnSolveButton(!this.props.isClicked) }>\r\n                        {\r\n                            buttonText\r\n                        }\r\n                    </button>\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { \r\n      isClicked: state.isClicked,\r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps, { clickOnSolveButton })(Button);","// Action Creator\nexport const clickOnSolveButton = (isClicked) => {\n    return {\n        type: 'SOLVE_BUTTON_CLICKED',\n        payload: isClicked\n    };\n};","import React, {Component} from 'react';\n\nimport './App.css';\nimport Grid from './Grid';\nimport Particles from 'react-particles-js';\nimport Button from './Button';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 700\n      }\n    }\n  }\n}\n\nclass App extends Component{\n\n  render(){\n    return(\n        <div className='main'>\n          <Particles className='particles'\n                params={ particlesOptions }\n          />\n          <Grid/>\n          <Button/>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport reducers from './reducers/index';\nimport './index.css';\nimport App from './components/App';\nimport 'tachyons';\n\nReactDOM.render(<Provider store={createStore(reducers)}>\n      <App/>\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}