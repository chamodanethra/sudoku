{"version":3,"sources":["../node_modules/@chamodanethra/sudoku_solver-wasm/sudoku_solver_wasm.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","heap","Array","fill","undefined","push","heap_next","length","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","takeObject","idx","ret","getObject","dropObject","calculate","data","ptr0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","passStringToWasm0","len0","__wbindgen_json_parse","arg0","arg1","obj","addHeapObject","JSON","parse"],"mappings":"mGAAA,mHAEIA,EAAoB,IAAIC,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAE3EH,EAAkBI,SAElB,IAAIC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBE,SAAWC,IAAYD,SAC7EF,EAAuB,IAAII,WAAWD,IAAYD,SAE/CF,EAOX,IAAMK,EAAO,IAAIC,MAAM,IAEvBD,EAAKE,UAAKC,GAEVH,EAAKI,UAAKD,EAAW,MAAM,GAAM,GAEjC,IAAIE,EAAYL,EAAKM,OAWrB,IAAIC,EAAkB,EAElBC,EAAoB,IAAIC,YAAY,SAElCC,EAAwD,oBAAjCF,EAAkBG,WACzC,SAAUC,EAAKC,GACjB,OAAOL,EAAkBG,WAAWC,EAAKC,IAEvC,SAAUD,EAAKC,GACjB,IAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIN,OACVY,QAASJ,EAAIR,SAkDrB,SAASa,EAAWC,GAChB,IAAMC,EATV,SAAmBD,GAAO,OAAOpB,EAAKoB,GAStBE,CAAUF,GAEtB,OATJ,SAAoBA,GACZA,EAAM,KACVpB,EAAKoB,GAAOf,EACZA,EAAYe,GAKZG,CAAWH,GACJC,EAMJ,SAASG,EAAUC,GACtB,IAAIC,EAxDR,SAA2Bd,EAAKe,EAAQC,GAEpC,QAAgBzB,IAAZyB,EAAuB,CACvB,IAAMd,EAAMN,EAAkBO,OAAOH,GAC/BiB,EAAMF,EAAOb,EAAIR,QAGvB,OAFAV,IAAkBkC,SAASD,EAAKA,EAAMf,EAAIR,QAAQU,IAAIF,GACtDP,EAAkBO,EAAIR,OACfuB,EAUX,IAPA,IAAIE,EAAMnB,EAAIN,OACVuB,EAAMF,EAAOI,GAEXC,EAAMpC,IAERqC,EAAS,EAENA,EAASF,EAAKE,IAAU,CAC3B,IAAMC,EAAOtB,EAAIuB,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIH,EAAMI,GAAUC,EAGxB,GAAID,IAAWF,EAAK,CACD,IAAXE,IACArB,EAAMA,EAAIwB,MAAMH,IAEpBJ,EAAMD,EAAQC,EAAKE,EAAKA,EAAME,EAAsB,EAAbrB,EAAIN,QAC3C,IAAMO,EAAOjB,IAAkBkC,SAASD,EAAMI,EAAQJ,EAAME,GAG5DE,GAFYvB,EAAaE,EAAKC,GAEhBK,QAIlB,OADAX,EAAkB0B,EACXJ,EAqBIQ,CAAkBZ,EAAM3B,IAAwBA,KACvDwC,EAAO/B,EAEX,OAAOY,EADGrB,IAAe4B,EAAMY,IAI5B,IAAMC,EAAwB,SAASC,EAAMC,GAChD,IArGwBZ,EAAKE,EAsG7B,OA1FJ,SAAuBW,GACfrC,IAAcL,EAAKM,QAAQN,EAAKI,KAAKJ,EAAKM,OAAS,GACvD,IAAMc,EAAMf,EAIZ,OAHAA,EAAYL,EAAKoB,GAEjBpB,EAAKoB,GAAOsB,EACLtB,EAoFAuB,CADGC,KAAKC,OArGShB,EAqGgBW,EArGXT,EAqGiBU,EApGvCnD,EAAkBI,OAAOE,IAAkBkC,SAASD,EAAKA,EAAME,S","file":"static/js/3.c7b928d7.chunk.js","sourcesContent":["import * as wasm from './sudoku_solver_wasm_bg.wasm';\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {string} data\n* @returns {any}\n*/\nexport function calculate(data) {\n    var ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.calculate(ptr0, len0);\n    return takeObject(ret);\n}\n\nexport const __wbindgen_json_parse = function(arg0, arg1) {\n    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}